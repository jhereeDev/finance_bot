// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  discordId     String        @unique
  username      String
  timezone      String        @default("UTC")
  currency      String        @default("USD")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  categories    Category[]
  transactions  Transaction[]
  budgets       Budget[]

  // Relations
  notifications Notification[]

  @@map("users")
}

model Category {
  id            String        @id @default(cuid())
  name          String
  emoji         String?
  color         String?
  isDefault     Boolean       @default(false)
  userId        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id])
  transactions  Transaction[]
  budgets       Budget[]

  @@unique([name, userId])
  @@map("categories")
}

model Transaction {
  id              String    @id @default(cuid())
  amount          Float
  currency        String    @default("USD")
  description     String?
  merchantName    String?
  transactionDate DateTime
  receiptNumber   String?
  receiptImageUrl String?
  ocrConfidence   Float?
  isManual        Boolean   @default(false)
  userId          String
  categoryId      String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])
  category        Category  @relation(fields: [categoryId], references: [id])
  items           TransactionItem[]

  @@index([userId])
  @@index([categoryId])
  @@index([merchantName])
  @@map("transactions")
}

model TransactionItem {
  id            Int     @id @default(autoincrement())
  transactionId String     @map("transaction_id")
  name          String
  quantity      Int     @default(1)
  unitPrice     Decimal @map("unit_price") @db.Decimal(10, 2)
  totalPrice    Decimal @map("total_price") @db.Decimal(10, 2)
  category      String?
  sku           String?

  // Relations
  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@map("transaction_items")
}

model Budget {
  id          String    @id @default(cuid())
  amount      Float
  periodType  String    @default("monthly") // weekly, monthly, yearly
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean   @default(true)
  userId      String
  categoryId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])

  @@index([userId])
  @@index([categoryId])
  @@map("budgets")
}

model Notification {
  id        Int       @id @default(autoincrement())
  userId    String    @map("user_id") // Changed to String to match discord_id
  type      String    // budget_alert, weekly_report, monthly_summary
  title     String
  message   String
  data      Json?     // Additional data as JSON
  isRead    Boolean   @default(false) @map("is_read")
  isSent    Boolean   @default(false) @map("is_sent")
  sentAt    DateTime? @map("sent_at")
  createdAt DateTime  @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [discordId], onDelete: Cascade)

  @@index([userId, isRead])
  @@map("notifications")
}

model Settings {
  id          Int     @id @default(autoincrement())
  key         String  @unique
  value       String
  description String?

  @@map("settings")
}

// For tracking receipt processing jobs
model ReceiptJob {
  id           Int       @id @default(autoincrement())
  userId       String    @map("user_id") // Changed to String to match discord_id
  imageUrl     String    @map("image_url")
  imagePath    String?   @map("image_path")
  status       String    @default("pending") // pending, processing, completed, failed
  ocrText      String?   @map("ocr_text")
  parsedData   Json?     @map("parsed_data")
  errorMessage String?   @map("error_message")
  retryCount   Int       @default(0) @map("retry_count")
  completedAt  DateTime? @map("completed_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  @@index([userId, status])
  @@map("receipt_jobs")
}
